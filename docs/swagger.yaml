basePath: /api
definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.LoginResponse:
    properties:
      expired_at:
        type: integer
      message:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/controllers.UserResponse'
    type: object
  controllers.UserResponse:
    properties:
      bank_id:
        type: string
      boss_id:
        type: string
      can_download_xlsx:
        type: boolean
      code:
        type: string
      email:
        type: string
      filial_id:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_staff:
        type: boolean
      logins:
        type: integer
      names:
        type: string
      rol_id:
        type: string
      roles:
        items:
          $ref: '#/definitions/services.Role'
        type: array
      username:
        type: string
    type: object
  services.Role:
    properties:
      code:
        type: string
      description:
        type: string
    type: object
externalDocs:
  description: Swagger Open API Specification
  url: https://swagger.io/specification/
host: localhost:4000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for the Global Auth Server API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Global Auth Server API
  version: "1.0"
paths:
  /:
    get:
      description: Get the home page message
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Show the home page
      tags:
      - home
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password.
      parameters:
      - description: User credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Authenticate user and return JWT token
      tags:
      - auth
swagger: "2.0"
